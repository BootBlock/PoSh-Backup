@{
  bundle_generation_time          = "__BUNDLE_GENERATION_TIME_PLACEHOLDER__"
  bundler_script_version          = "__BUNDLER_VERSION_PLACEHOLDER__" # Populated by bundler

  ai_development_watch_list       = @(
    "CRITICAL (AI): ENSURE FULL, UNTRUNCATED FILES ARE PROVIDED WHEN REQUESTED. EXTREME VIGILANCE AND A CHANGE IN AI STRATEGY REQUIRED.",
    "CRITICAL (AI): VERIFY LINE COUNTS AND COMMENT INTEGRITY. EXTREME VIGILANCE REQUIRED.",
    "CRITICAL (AI): Ensure no extraneous trailing whitespace.",
    "CRITICAL (AI): When modifying existing files, EXPLICITLY CONFIRM THE BASELINE VERSION/CONTENT. If errors persist, switch to diffs/patches or manual user changes.",
    "CRITICAL (AI STRATEGY): When a fix causes a regression or a similar error, STOP. Perform a deeper root cause analysis instead of iterative, surface-level fixes. The scheduling feature is a key example of this failure.",
    "CRITICAL (SYNTAX - ScheduledTasks): The `ScheduledTasks` module was BUGGY and has specific requirements:",
    "  - **RandomDelay:** The `-RandomDelay` parameter on `New-ScheduledTaskTrigger` is broken. The ONLY reliable method is to create the task definition *without* the delay, use `Export-ScheduledTask` to get the XML, manually inject the ISO 8601 string (e.g., `<RandomDelay>PT15M</RandomDelay>`), and then register the task using `Register-ScheduledTask -Xml`.",
    "  - **Finding Tasks:** `Get-ScheduledTask -TaskName 'MyTask' -TaskPath '\MyFolder'` is UNRELIABLE. The correct method is to get all tasks in the folder using a wildcard (`Get-ScheduledTask -TaskPath '\MyFolder\*'`) and then filter the results in PowerShell.",
    "  - **Deleting Tasks:** `Unregister-ScheduledTask` is also unreliable with `-TaskName` and `-TaskPath`. The correct method is to pass the task object directly using `-InputObject`.",
    "  - **Folder Existence:** `Get-ScheduledTaskFolder` is not universally available. The correct, compatible way to check for/create a folder is to use the `Schedule.Service` COM object.",
    "CRITICAL (SYNTAX - Hyper-V): The `Checkpoint-VM` cmdlet can be ambiguous. Use the `-VMName` parameter set (e.g., `Checkpoint-VM -VMName 'MyVM' -Name 'MyCheckpoint'`) for better compatibility instead of passing the full VM object (`-VM <object>`). The `-SnapshotMode` parameter does not exist.",
    "CRITICAL (SYNTAX - Hyper-V): The `Mount-VHD` cmdlet may not have a `-LiteralPath` parameter on all systems. Use the standard `-Path` parameter for compatibility.",
    "CRITICAL (SYNTAX): PowerShell 5.1 does not support inline if-statements like `$var = if (`$condition) { 'true' } else { 'false' }`. Use a standard multi-line if/else block to assign the variable before using it, especially inside here-strings or complex command arguments.",
    "CRITICAL (SYNTAX): PowerShell does not have a ternary operator (`condition ? true : false`). Use `if/else` statements or hashtable lookups.",
    "CRITICAL (SYNTAX): PowerShell logical AND is `-and`, not `&&`.",
    "CRITICAL (SYNTAX): PowerShell strings for Markdown triple backticks: use single quotes externally, e.g., ''''''.",
    "CRITICAL (SYNTAX): Escaping in PowerShell here-strings for JavaScript (e.g., `$`, `${}`) requires care.",
    "CRITICAL (SYNTAX): `-replace` operator replacement strings with special chars need single quotes.",
    "CRITICAL (SYNTAX - PSD1/Strings): Avoid `$(...)` in PSD1 strings if variables/properties might be null. Use formatting or pre-resolution.",
    "CRITICAL (PSD1_PARSING): `Import-PowerShellDataFile` can fail on double-quoted strings with backtick-escaped `\$`. Use single quotes or rephrase.",
    "AI STRATEGY (ACCURACY): When providing full files, state estimated line count difference and mention significant refactoring.",
    "AI STRATEGY (OUTPUT): Provide one file at a time unless small & related (confirm with user).",
    "STRUCTURE: Respect modular design (Core, Managers, Utilities, Operations, etc.). `Write-LogMessage` is now in `Managers\\LogManager.psm1`.",
    "SCOPE: Global color/status map variables in `PoSh-Backup.ps1` (now initialised by `InitialisationManager.psm1`) must be accessible for `Write-LogMessage` (via `Utils.psm1` facade from `Managers\\LogManager.psm1`).",
    "SYNTAX (PSSA): `$null` should be on the left side of equality comparisons (e.g., `if (`$null -eq `$variable)`).",
    "MODULE_SCOPE (IMPORTANT): Functions from modules imported by a 'manager' or 'orchestrator' module are not automatically available to other modules called by that manager/orchestrator, nor to the script that called the manager. The module needing the function must typically import the provider of that function directly, or the calling script must import modules whose functions it will call directly after the manager/orchestrator returns. Using `-Global` on imports is a workaround but generally less desirable.",
    "CRITICAL (MODULE_STATE): Module-scoped variables (e.g., `$Script:MyVar`) are NOT shared across different imports of the same module within a single script run. If state must be maintained (like tracking active snapshot sessions), use a global variable (`$Global:MyVar`) and ensure its name is unique to the module's purpose.",
    "SYNTAX (CMDLET BEHAVIOR): Cmdlets that create or modify objects (e.g., Checkpoint-VM, New-ScheduledTaskTrigger) may not return the object by default. Always check if a -Passthru switch is needed to capture the result in a variable."
  )

  conversation_summary            = @(
    "Development of a comprehensive PowerShell file backup solution (PoSh-Backup.ps1 v1.31.0).",
    "Modular design: Core (Modules\\Core\\), Managers (Modules\\Managers\\), Utilities (Modules\\Utilities\\), Operations (Modules\\Operations\\), ConfigManagement (Modules\\ConfigManagement\\), Reporting (Modules\\Reporting\\), Targets (Modules\\Targets\\).",
    "AI State structure loaded from 'Meta\\AIState.template.psd1', dynamically populated by Bundler (v__BUNDLER_VERSION_PLACEHOLDER__).",
    "--- CLI Usability Enhancements (Completed in Previous Session Segment) ---",
    "    - **Goal:** Add several command-line switches to improve usability and troubleshooting.",
    "    - **Feature: -Version Switch**",
    "        - `PoSh-Backup.ps1` (v1.18.0 -> v1.19.0): Added `-Version` parameter and help text.",
    "        - `Modules\\Managers\\CoreSetupManager.psm1`: Updated to pass the switch.",
    "        - `Modules\\ScriptModeHandler.psm1`: Added logic to display the script version and exit.",
    "    - **Feature: -Quiet Switch**",
    "        - `PoSh-Backup.ps1` (v1.19.0 -> v1.20.0): Added `-Quiet` parameter and set a `$Global:IsQuietMode` flag.",
    "        - `Modules\\Managers\\LogManager.psm1`: `Write-LogMessage` updated to suppress non-error console output when quiet mode is active.",
    "        - `Modules\\Utilities\\ConsoleDisplayUtils.psm1`: `Write-ConsoleBanner` updated to respect quiet mode.",
    "        - `Modules\\Managers\\InitialisationManager.psm1`: Updated to suppress author info block in quiet mode.",
    "    - **Feature: Troubleshooting Toggles**",
    "        - `PoSh-Backup.ps1` (v1.20.0 -> v1.21.0): Added `-SkipVSS` and `-SkipRetriesCLI` parameters.",
    "        - `Modules\\Managers\\CliManager.psm1`: Updated to recognize the new switches.",
    "        - `Modules\\ConfigManagement\\EffectiveConfigBuilder\\OperationalSettings.psm1`: Updated to implement the override logic for the new switches.",
    "        - `README.md`: Updated to document the new switches.",
    "--- Modularisation of PoSh-Backup.ps1 (Completed in Previous Session Segment) ---",
    "    - Goal: Reduce the size and complexity of `PoSh-Backup.ps1` by extracting logical blocks into new manager modules.",
    "    - **Phase 1: CLI Override Processing**",
    "        - New Module `Modules\\Managers\\CliManager.psm1` (v1.0.0) created.",
    "            - Contains `Get-PoShBackupCliOverride` function to process `$PSBoundParameters` from `PoSh-Backup.ps1` and return the `$cliOverrideSettings` hashtable.",
    "        - `PoSh-Backup.ps1` (v1.14.6 -> v1.15.0):",
    "            - Imports `CliManager.psm1`.",
    "            - Calls `Get-PoShBackupCliOverride` to populate `$cliOverrideSettings`.",
    "            - Removed manual definition of `$cliOverrideSettings` hashtable.",
    "    - **Phase 2: Initial Script Setup (Globals, Banner)**",
    "        - New Module `Modules\\Managers\\InitialisationManager.psm1` (v1.0.0) created.",
    "            - Contains `Invoke-PoShBackupInitialSetup` function to:",
    "                - Define global colour variables (e.g., `$Global:ColourInfo`).",
    "                - Define global status-to-colour map (`$Global:StatusToColourMap`).",
    "                - Initialise global logging variables (e.g., `$Global:GlobalLogFile`).",
    "                - Display the starting script banner (including dynamic version extraction).",
    "        - `PoSh-Backup.ps1` (v1.15.0 -> v1.16.0):",
    "            - Imports `InitialisationManager.psm1`.",
    "            - Calls `Invoke-PoShBackupInitialSetup` at the beginning.",
    "            - Removed the corresponding global variable definitions and banner logic.",
    "    - **Phase 3: Core Setup (Module Imports, Config Load, Job Resolution)**",
    "        - New Module `Modules\\Managers\\CoreSetupManager.psm1` (v1.0.0, then to v1.0.2) created.",
    "            - Contains `Invoke-PoShBackupCoreSetup` function to:",
    "                - Import the bulk of core and manager modules (ConfigManager, Operations, Reporting, various Managers, etc.).",
    "                - Load and validate application configuration (calling `Import-AppConfiguration`).",
    "                - Handle informational script modes (calling `Invoke-PoShBackupScriptMode`).",
    "                - Validate 7-Zip path.",
    "                - Initialise global file logging variables based on config.",
    "                - Resolve jobs to process (calling `Get-JobsToProcess`).",
    "                - Build final job execution order (calling `Build-JobExecutionOrder`).",
    "                - Returns key results like `$Configuration`, `$jobsToProcess`, etc.",
    "        - `PoSh-Backup.ps1` (v1.16.0 -> v1.17.0):",
    "            - Imports `CoreSetupManager.psm1`.",
    "            - Calls `Invoke-PoShBackupCoreSetup` and receives necessary variables.",
    "            - Removed the corresponding blocks of logic.",
    "        - Addressed module scope issues where `Find-SevenZipExecutable` (from `7ZipManager` via `Discovery.psm1`) was not found by `SevenZipPathResolver.psm1`. Resolved by having `SevenZipPathResolver.psm1` explicitly import `7ZipManager.psm1`.",
    "        - Addressed module scope issues where `Invoke-PoShBackupRun` (from `JobOrchestrator.psm1`) and `Invoke-PoShBackupPostRunActionHandler` (from `PostRunActionOrchestrator.psm1`) were not found by `PoSh-Backup.ps1`. Resolved by having `PoSh-Backup.ps1` explicitly import these two modules after `CoreSetupManager.psm1` has run. Also ensured `JobOrchestrator.psm1` imports `ConfigManager.psm1` and `Reporting.psm1`.",
    "    - **Phase 4: Finalisation (Summary, Pause, Exit)**",
    "        - New Module `Modules\\Managers\\FinalisationManager.psm1` (v1.0.0) created.",
    "            - Contains `Invoke-PoShBackupFinalisation` function to:",
    "                - Display completion banner.",
    "                - Log final script statistics.",
    "                - Call `Invoke-PoShBackupPostRunActionHandler` (from `PostRunActionOrchestrator.psm1`, which `FinalisationManager.psm1` now imports).",
    "                - Handle pause behaviour.",
    "                - Exit with appropriate status code.",
    "        - `PoSh-Backup.ps1` (v1.17.1 -> v1.18.0):",
    "            - Imports `FinalisationManager.psm1`.",
    "            - Calls `Invoke-PoShBackupFinalisation` at the end.",
    "            - Removed the corresponding finalisation logic.",
    "        - Addressed syntax error in `PoSh-Backup.ps1` call to `Invoke-PoShBackupFinalisation` for the `-JobNameForLog` parameter (missing `$()` for subexpression).",
    "--- PREVIOUS MAJOR FEATURES (Summary from prior state) ---",
    "  - Update Checking and Self-Application Framework (Meta\\Version.psd1, Utilities\\Update.psm1, Meta\\apply_update.ps1, Meta\\Package-PoShBackupRelease.ps1).",
    "  - Pester Testing - Phase 1: Utilities (ConfigUtils.Tests.ps1, FileUtils.Tests.ps1 established patterns; SystemUtils.Tests.ps1 was next).",
    "  - Multi-Volume (Split) Archives, Job Chaining/Dependencies, 7-Zip Password Handling (-p switch), Include/Exclude List Files, CPU Affinity.",
    "  - Core Refactorings (Operations, Logging, Managers, Utils facade, PoSh-Backup.ps1 main loop to JobOrchestrator, ScriptModeHandler).",
    "  - SFX Archives, Checksums, Post-Run Actions, Expanded Backup Targets (UNC, Replicate, SFTP), Log File Retention.",
    "--- Feature: Integrated Backup Job Scheduling (Completed in Previous Session Segment) ---",
    "    - **Goal:** Allow users to define backup schedules in the config file and synchronise them with Windows Task Scheduler.",
    "    - **Configuration:**",
    "        - `Config\Default.psd1`: Added a new, richly commented `Schedule` hashtable to each job definition.",
    "        - `Modules\ConfigManagement\Assets\ConfigSchema.psd1`: Updated the schema to validate all new `Schedule` options.",
    "    - **Core Logic:**",
    "        - **New Module:** `Modules\Managers\ScheduleManager.psm1` created to contain all logic for interacting with the Windows Task Scheduler.",
    "        - `PoSh-Backup.ps1`: Added a new `-UpdateSchedules` switch and a `Scheduling` parameter set to invoke the new functionality.",
    "        - `Modules\Managers\CoreSetupManager.psm1`: Updated to recognise the `-UpdateSchedules` switch and call the `ScheduleManager`.",
    "    - **Bug Fixes & Refinements (Critical):**",
    "        - **`RandomDelay` Bug:** Discovered a bug in PowerShell's `ScheduledTasks` module where it incorrectly handles the `RandomDelay` property. The **only** reliable solution, implemented after multiple failures, is to generate the task's XML using `Export-ScheduledTask`, manually inject the correctly formatted ISO 8601 string (e.g., `<RandomDelay>PT15M</RandomDelay>`), and then register the task from the modified XML using `Register-ScheduledTask -Xml`.",
    "        - **Task Discovery Bug:** Corrected the logic for finding existing tasks. The `-TaskName` parameter on `Get-ScheduledTask` is unreliable. The fix was to get all tasks in the target folder (`-TaskPath '\PoSh-Backup\*'`) and then filter the results in PowerShell.",
    "        - **Task Removal Bug:** Corrected the logic for removing tasks when a schedule is disabled or removed from the config. The fix involved using an explicit `if/elseif` structure and passing the found task object directly to `Unregister-ScheduledTask -InputObject`.",
    "        - **Syntax Errors:** Fixed a `&&` vs `-and` error in `UNC.Target.psm1` and a ternary operator (`? :`) error in `ReportingHtml.psm1`.",
    "    - **Status:** The feature is now working as intended after a significant and difficult debugging process.",
    "--- Feature: Disable Job Flag (Completed in Previous Session Segment) ---",
    "    - Goal: Allow individual jobs to be disabled via an 'Enabled = `$false' flag in configuration.",
    "    - `Config\\Default.psd1`: Added `Enabled = `$true` (boolean) to example job definitions.",
    "    - `Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`: Added `Enabled` key (boolean, optional) to the job schema.",
    "    - `Modules\\ConfigManagement\\JobResolver.psm1`: Modified `Get-JobsToProcess` to filter out jobs where `Enabled` is `$false` during job/set resolution.",
    "    - `Modules\\Managers\\JobDependencyManager.psm1`:",
    "        - `Build-JobExecutionOrder` now skips initially specified disabled jobs.",
    "        - `Test-PoShBackupJobDependencyGraph` now flags dependencies on disabled jobs as errors.",
    "    - `Modules\\Core\\JobOrchestrator.psm1`: Modified `Invoke-PoShBackupRun` to perform a final check and skip execution of disabled jobs, generating a minimal 'SKIPPED_DISABLED' report.",
    "    - Resolved 'Get-ConfigValue not recognized' error in `JobDependencyManager.psm1` by adding a direct `Import-Module Utils.psm1`.",
    "--- Feature: Backup Target Provider - WebDAV (Completed in Previous Session Segment) ---",
    "    - Goal: Add support for transferring backups to WebDAV shares, including remote retention.",
    "    - `Modules\\Targets\\WebDAV.Target.psm1` (v0.1.0 -> v0.2.0):",
    "        - Added internal helper function `Group-RemoteWebDAVBackupInstancesInternal` to list and group backup instances from the WebDAV server using `PROPFIND` and parsing the XML response.",
    "        - `Invoke-PoShBackupTargetTransfer` modified to:",
    "            - Call `Group-RemoteWebDAVBackupInstancesInternal` after successful uploads if retention is configured (`RemoteRetentionSettings.KeepCount`).",
    "            - Determine which instances to delete based on `KeepCount`.",
    "            - Use the `DELETE` WebDAV method to remove files belonging to instances marked for deletion.",
    "            - Respect simulation mode for retention operations.",
    "        - `Initialize-WebDAVRemotePathInternal` improved to better handle PROPFIND checks before MKCOL.",
    "    - `Config\\Default.psd1`: No changes in this segment (WebDAV example was added previously).",
    "    - `Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`: No changes in this segment (WebDAV type was added previously).",
    "    - `Modules\\PoShBackupValidator.psm1`: No direct code changes needed due to dynamic validation (WebDAV validation function was added previously).",
    "    - `README.md`: Updated to reflect that WebDAV remote retention is now implemented.",
    "    - User reported syntax errors in `WebDAV.Target.psm1` v0.2.0 (around line 146 in `Initialize-WebDAVRemotePathInternal` for logging PROPFIND status/error) which were manually corrected by the user."
    "--- Feature: Conditional Dependency Checker (Completed in Previous Session Segment) ---",
    "    - **Goal:** Prevent the script from failing if an optional external module (like `Posh-SSH`) is missing but the feature requiring it (like an SFTP target) is not being used in the current run.",
    "    - **Attempt 1 (Unconditional):** A dependency check was added to `CoreSetupManager.psm1` that checked for all potential dependencies at startup. This failed for users who did not have `Posh-SSH` installed, regardless of their configuration.",
    "    - **Attempt 2 (Config-Aware):** The checker was modified to only look for dependencies if a corresponding feature (e.g., a target of type 'SFTP') was defined anywhere in the configuration. This was still too aggressive, as the default config file includes an SFTP example, forcing new users to edit the file to run the script.",
    "    - **Final Implementation (Context-Aware):** The dependency check in `CoreSetupManager.psm1` (v1.1.2) was moved to run *after* the configuration is loaded and the specific jobs for the current run are resolved. The check is now passed the list of active jobs and only validates dependencies that are actually required by those jobs.",
    "    - **Documentation:** Added detailed comments within `CoreSetupManager.psm1` explaining the new pattern and how to add future conditional dependency checks.",
    "    - **Status:** The feature is now working as intended, providing a robust and user-friendly dependency validation experience.",
    "--- Feature: Pin Backup on Creation (Completed in Previous Session Segment) ---",
    "    - **Goal:** Allow a user to pin a backup at creation time, either via a CLI switch or a per-job configuration setting.",
    "    - **Configuration:**",
    "        - `Config\Default.psd1`: Added `PinOnCreation = `$false` (boolean) to the example job definitions.",
    "        - `Modules\ConfigManagement\Assets\ConfigSchema.psd1`: Updated the job schema to include the optional `PinOnCreation` boolean key.",
    "    - **CLI Parameters & Logic:**",
    "        - `PoSh-Backup.ps1`: Added a new `-Pin` switch. Defined `Execution` and `Pinning` Parameter Sets to resolve ambiguity between running a job and managing an existing pin.",
    "        - `Modules\Managers\CliManager.psm1`: Updated to recognise the new `-Pin` switch.",
    "        - `Modules\ConfigManagement\EffectiveConfigBuilder\OperationalSettings.psm1`: Updated to resolve the final `PinOnCreation` setting, giving the `-Pin` CLI switch precedence over the job configuration.",
    "    - **Core Implementation:**",
    "        - `Modules\Operations\LocalArchiveProcessor.psm1`: After a successful archive creation, it now checks the effective `PinOnCreation` flag. If true, it calls `Add-PoShBackupPin` to create the `.pinned` marker file.",
    "        - `Modules\Managers\PinManager.psm1`: The `Add-PoShBackupPin` function was made more robust to handle file creation errors and now writes descriptive, human-readable content to the `.pinned` file.",
    "    - **Bug Fix:** Resolved an issue where using `-PinBackup` or `-UnpinBackup` would fail because the script was trying to resolve a backup job to run. Corrected the order of operations in `CoreSetupManager.psm1` to handle these informational/management modes before attempting job resolution.",
    "--- Feature: Archive Inspection & Restore Utilities (Completed in Previous Session Segment) ---",
    "    - **Goal:** Implement non-destructive archive inspection and robust file extraction capabilities directly from the command line.",
    "    - **New Modules:**",
    "        - `Modules\\Managers\\7ZipManager\\Lister.psm1`: Created to handle `7z l -slt` and parse the detailed output.",
    "        - `Modules\\Managers\\7ZipManager\\Extractor.psm1`: Created to handle `7z x` for restoring files.",
    "    - **Facade Updates:** `7ZipManager.psm1` updated to import and export the new functions.",
    "    - **Core Logic:**",
    "        - `ScriptModeHandler.psm1` updated to orchestrate the new `-ListArchiveContents` and `-ExtractFromArchive` modes.",
    "        - The new modes support encrypted archives via the `-ArchivePasswordSecretName` parameter, which leverages the existing `PasswordManager`.",
    "        - The extraction logic correctly handles overwriting files via a `-ForceExtract` switch.",
    "    - **Bug Fixes & Refinements:**",
    "        - **Parameter Sets:** Resolved multiple `A parameter cannot be found...` and `Parameter set cannot be resolved...` errors by completely restructuring the `param()` block in `PoSh-Backup.ps1`. Created distinct, mutually exclusive parameter sets (`Execution`, `Pinning`, `Listing`, `Extraction`) and made other parameters common to all sets. This was the key fix for the utility modes.",
    "        - **Order of Operations:** Corrected the logic in `CoreSetupManager.psm1` to ensure it checks for and handles any utility/informational modes *before* it attempts to resolve jobs for a backup run.",
    "        - **7-Zip Parser:** After a lengthy debugging process, a fully robust parser for the `7z l -slt` output was implemented in `Lister.psm1`, correctly handling the record separators.",
    "        - Addressed all associated PSScriptAnalyzer warnings.",
    "--- Feature: Flexible Notification System (Completed in Previous Session Segment) ---",
    "    - **Goal:** Generalise the notification system to support multiple providers (Email, Webhooks) and allow CLI overrides.",
    "    - **Configuration (`Config\\Default.psd1`):**",
    "        - Renamed `EmailProfiles` to `NotificationProfiles` and `EmailNotification` to `NotificationSettings`.",
    "        - Each profile now has a `Type` key (e.g., 'Email', 'Webhook') and nests provider-specific settings under a `ProviderSettings` key.",
    "        - Added a new `ExampleWebhook` profile with a flexible `BodyTemplate` for sending JSON payloads to services like Teams or Slack.",
    "    - **CLI:**",
    "        - `PoSh-Backup.ps1`: Added a new `-NotificationProfileNameCLI <string>` parameter to override the configured notification profile for a run.",
    "        - `Modules\\Managers\\CliManager.psm1`: Updated to recognise the new parameter.",
    "    - **Schema (`Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`):** Updated to validate the new generic `NotificationProfiles` and `NotificationSettings` structure.",
    "    - **Core Logic (`Modules\\Managers\\NotificationManager.psm1`):**",
    "        - Refactored into a provider-based dispatcher.",
    "        - `Invoke-PoShBackupNotification` now reads the profile `Type` and calls an appropriate internal function (`Send-EmailNotificationInternal` or `Send-WebhookNotificationInternal`).",
    "        - The webhook provider populates the `BodyTemplate` with job data and sends it via `Invoke-WebRequest`.",
    "    - **Integration:**",
    "        - `Modules\\Core\\JobOrchestrator.psm1`: Updated to call the new generic `Invoke-PoShBackupNotification` function after job completion (for both successful and skipped jobs).",
    "        - `Modules\\ConfigManagement\\EffectiveConfigBuilder\\OperationalSettings.psm1`: Logic updated to resolve the `NotificationSettings` hierarchy, giving the CLI override top priority.",
    "    - **Bug Fix:** Corrected an omission where the call to the notification manager was missing from `JobOrchestrator.psm1` after the initial refactoring.",
    "--- Feature: Maintenance Mode (Completed in Previous Session Segment) ---",
    "    - **Goal:** A global flag (in config or on-disk) to prevent new backup jobs from starting.",
    "    - `Config\\Default.psd1`: Added `MaintenanceModeEnabled`, `MaintenanceModeMessage`, and `MaintenanceModeFilePath` global settings.",
    "    - `Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`: Updated schema for new maintenance settings.",
    "    - `PoSh-Backup.ps1`: Added `-Maintenance <boolean>` utility parameter set and a `-ForceRunInMaintenanceMode` switch for execution.",
    "    - `Modules\\Managers\\CliManager.psm1`: Updated to recognize the new CLI parameters.",
    "    - `Modules\\ScriptModeHandler.psm1`: Implemented logic to handle the `-Maintenance` switch, creating/deleting the on-disk flag file and exiting.",
    "    - `Modules\\Managers\\CoreSetupManager.psm1`: Implemented the core check for maintenance mode. This required several fixes:",
    "        - **Bug Fix 1:** Corrected the parameter type for `-Maintenance` from `[PSReference]` to `[Nullable[bool]]` in `PoSh-Backup.ps1` and all downstream modules (`CoreSetupManager`, `ScriptModeHandler`) to resolve `Cannot process argument transformation` error.",
    "        - **Bug Fix 2:** Corrected the order of operations. The maintenance mode check was moved to run *after* the `ScriptModeHandler` to allow the `-Maintenance `$false` command to successfully disable the mode before the script halts.",
    "        - **Bug Fix 3:** Corrected path resolution for the on-disk flag file to use the reliable `_PoShBackup_PSScriptRoot` key from the configuration object.",
    "    - `README.md`: Updated to document the new feature and its CLI controls.",
    "--- Feature: Snapshot Orchestration for Hyper-V (Completed in Previous Session Segment) ---",
    "    - **Goal:** Implement infrastructure-level snapshotting for application-consistent VM backups, starting with Hyper-V.",
    "    - **Configuration (`Config\Default.psd1` v1.9.1):**",
    "        - Added a new top-level `SnapshotProviders` hashtable to define snapshot engine connections (e.g., 'LocalHyperV').",
    "        - Added job-level `SnapshotProviderName` (string) and `SourceIsVMName` (boolean) settings.",
    "        - Updated the example `HyperV_VM_Backup_Example` job to accept an array for the `Path` key, where element 0 is the VM name and subsequent elements are optional sub-paths to back up from within the guest (e.g., `C:\\Users`).",
    "    - **Schema (`ConfigSchema.psd1`):** Updated to validate all new snapshot-related configuration keys.",
    "    - **New Modules:**",
    "        - `Modules\Managers\SnapshotManager.psm1` (v1.0.5): Created as a facade to orchestrate snapshot operations (create, get paths, remove).",
    "        - `Modules\SnapshotProviders\HyperV.Snapshot.psm1` (v1.1.0): The concrete implementation for Hyper-V. Uses `Checkpoint-VM`, `Mount-VHD`, and `Dismount-VHD` to manage the snapshot lifecycle.",
    "        - `Modules\Core\Operations\JobExecutor.SnapshotCleanupHandler.psm1` (v1.0.0): New cleanup handler dedicated to calling the SnapshotManager for cleanup.",
    "    - **Core Logic Integration (`JobPreProcessor.psm1` v1.1.7):**",
    "        - The pre-processor now checks for a `SnapshotProviderName` on a job.",
    "        - If found, it calls the `SnapshotManager` to create and mount the snapshot.",
    "        - It intelligently translates guest sub-paths to the temporary host-mounted drive letter.",
    "        - It correctly passes the created `$snapshotSession` object back up the call stack for cleanup.",
    "    - **Bug Fixes & Debugging (Critical):**",
    "        - Corrected a series of parameter binding errors by ensuring `$Logger` and `$PSCmdlet` objects were passed through the entire call chain from facades to providers.",
    "        - Resolved a critical bug where the `SnapshotManager` was not persisting the loaded provider module across different function calls, leading to the cleanup function not being found. The fix involved storing the loaded module object in the global session state (`$Global:PoShBackup_SnapshotManager_ActiveSessions`).",
    "        - Addressed `7-Zip` `Access is denied` warnings on junction points by making the `-snl` switch configurable via a new `FollowSymbolicLinks` setting.",
    "        - Fixed a bug in the retention policy scanner that prevented it from correctly matching archive filenames with date stamps.",
    "    - **Status:** The feature is now fully implemented and working, including VHD dismount and cleanup.",
    "--- Feature: Automated Backup Verification (Completed in Previous Session Segment) ---",
    "    - **Goal:** Create a framework to automatically test if backups are valid and restorable.",
    "    - **New Config:** Added a `VerificationJobs` hashtable to `Config\Default.psd1` and `Modules\ConfigManagement\Assets\ConfigSchema.psd1` to define verification tasks.",
    "    - **New Script Mode:** Added a `-RunVerificationJobs` switch and a `Verification` parameter set to `PoSh-Backup.ps1`.",
    "    - **New Manager Module:** Created `Modules\Managers\VerificationManager.psm1` to orchestrate the entire verification process, including sandbox preparation, archive restoration, and cleanup.",
    "    - **Module Integration:** `ScriptModeHandler.psm1` now lazy-loads and calls the new `VerificationManager`. `RetentionManager.psm1` was updated to export `Find-BackupArchiveInstance` for use by the verification process.",
    "    - **Contents Manifest Generation:**",
    "        - `Modules\Operations\LocalArchiveProcessor.psm1` updated with a `GenerateContentsManifest` option.",
    "        - When enabled, it creates a `.contents.manifest` file listing every file and directory from the archive, along with their CRC checksum, size, modification date, and attributes.",
    "        - `Modules\Managers\7ZipManager\Lister.psm1` parser was significantly improved to correctly capture all metadata fields from `7z l -slt` output.",
    "    - **Verification Logic:**",
    "        - `VerificationManager.psm1` now parses the new rich manifest.",
    "        - It intelligently handles both files and directories, checking for existence.",
    "        - For files, it verifies the size and modification date against the manifest.",
    "        - A C# helper class and function (`Get-FileCrc32Internal`) were added to calculate CRC32 checksums for restored files.",
    "    - **Bug Fixes:**",
    "        - Corrected an endianness issue in the CRC32 calculation by reversing the byte array before string conversion.",
    "        - Fixed file I/O errors by replacing `Set-Content`/`Out-File` with the more compatible `[System.IO.File]::WriteAllLines` method for manifest creation.",
    "        - Made the verification logic robust against hidden/system files by using `Get-Item -Force` within a `try/catch` block.",
    "    - **Status:** The feature is now complete and working as expected.",
    "--- Feature: Configurable 7-Zip Temporary Directory (Completed in Previous Session Segment) ---",
    "    - **Goal:** Allow users to specify a custom temporary directory for 7-Zip's working files to manage disk space and I/O.",
    "    - `Config\Default.psd1`: Added global `DefaultSevenZipTempDirectory` and job-level `SevenZipTempDirectory` settings.",
    "    - `Modules\ConfigManagement\Assets\ConfigSchema.psd1`: Updated schema to validate the new `SevenZipTempDirectory` keys.",
    "    - `Modules\ConfigManagement\EffectiveConfigBuilder\SevenZipSettings.psm1`: Modified to resolve the effective `JobSevenZipTempDirectory` path.",
    "    - `Modules\Managers\7ZipManager\ArgumentBuilder.psm1`: Updated to add the `-w`{path}`` switch to the 7-Zip command if a valid temporary directory is configured.",
    "    - `README.md`: Updated to document the new feature and its configuration options.",
    "--- Feature: Get Effective Configuration Utility (Completed in Previous Session Segment) ---",
    "    - **Goal:** Add a diagnostic switch `-GetEffectiveConfig <JobName>` to display the final, merged configuration for a specific job.",
    "    - `PoSh-Backup.ps1`: Added the `-GetEffectiveConfig` parameter and a new `EffectiveConfig` parameter set.",
    "    - `Modules\Managers\CliManager.psm1`: Updated to recognize the new parameter.",
    "    - `Modules\Managers\CoreSetupManager.psm1`: Updated to pass the new parameter value to `ScriptModeHandler`.",
    "    - `Modules\ScriptModeHandler.psm1` (v1.7.0 -> v1.8.0): Implemented the core logic to handle the new mode, call `Get-PoShBackupJobEffectiveConfiguration`, and display the formatted results before exiting.",
    "    - `README.md`: Updated to document the new diagnostic switch.",
    "    - **Bug Fix:** Corrected a `Cannot bind argument... because it is null` error by properly passing the `$cliOverrideSettings` hashtable to the `ScriptModeHandler`.",
    "    - **Status:** The feature is now complete and working as expected.",
    "--- Feature: Log File Archiving and Compression (Completed in Previous Session Segment) ---",
    "    - **Goal:** Add an option to compress old log files into a zip archive instead of deleting them during retention.",
    "    - `Config\Default.psd1`: Added global `CompressOldLogs` and `OldLogCompressionFormat` settings.",
    "    - `Modules\ConfigManagement\Assets\ConfigSchema.psd1`: Updated schema to validate the new log compression settings.",
    "    - `Modules\ConfigManagement\EffectiveConfigBuilder\OperationalSettings.psm1`: Updated to resolve the effective log compression settings.",
    "    - `Modules\Managers\LogManager.psm1`: The `Invoke-LogFileRetention` function was updated to use `Compress-Archive` on logs marked for deletion when the feature is enabled. A PSSA false positive was also addressed.",
    "    - `Modules\Core\JobOrchestrator.psm1`: Corrected the call to `Invoke-LogFileRetention` to pass the new, required parameters, fixing a `Cannot bind argument` error.",
    "    - `README.md`: Updated to document the new log compression feature.",
    "    - **Status:** The feature is now complete and working as expected.",
    "--- Feature: Post-Local-Archive Script Hook (Completed in Previous Session Segment) ---",
    "    - **Goal:** Add a new hook point to run a script after local archive creation but before remote transfers.",
    "    - `Config\Default.psd1`: Added `PostLocalArchiveScriptPath` setting to the example job definition.",
    "    - `Modules\ConfigManagement\Assets\ConfigSchema.psd1`: Updated schema to validate the new hook key.",
    "    - `Modules\ConfigManagement\EffectiveConfigBuilder\OperationalSettings.psm1`: Updated to resolve the new hook path.",
    "    - `Modules\Operations\LocalArchiveProcessor.psm1`: Modified to call `Invoke-PoShBackupHook` for the new `PostLocalArchive` hook type after successful local archive creation and testing.",
    "    - `Modules\Core\Operations\JobExecutor.LocalBackupOrchestrator.psm1`: Updated to pass the `$ActualConfigFile` parameter through to the `LocalArchiveProcessor` so the hook has access to it.",
    "    - `README.md`: Updated feature description to include the new hook point.",
    "    - **Status:** The feature is now complete and working as expected.",
    "--- Feature: Report File Retention (Completed in Previous Session Segment) ---",
    "    - **Goal:** Add an automated retention policy for report files to prevent the Reports directory from growing indefinitely.",
    "    - `Config\Default.psd1`: Added global `DefaultReportRetentionCount`, `CompressOldReports`, and `OldReportCompressionFormat` settings.",
    "    - `Modules\ConfigManagement\Assets\ConfigSchema.psd1`: Updated schema to validate the new report retention settings.",
    "    - `Modules\Managers\FinalisationManager.psm1`: Implemented the core retention logic in a new `Invoke-ReportFileRetentionInternal` function. This function is called at the end of a run and can either delete or compress old reports based on the configuration. The completion banner was moved to run after retention.",
    "    - `PoSh-Backup.ps1`: Corrected the call to `Invoke-PoShBackupFinalisation` to pass the full list of processed jobs needed for the retention logic, fixing a parameter binding error.",
    "    - `README.md`: Updated feature list to include report retention.",
    "    - **Status:** The feature is now complete and working as expected.",
    "--- Feature: Export Diagnostic Package Utility (Completed in Previous Current Session Segment) ---",
    "    - **Goal:** Add a CLI switch to create a zip file containing sanitized configs, logs, and system info for easier troubleshooting.",
    "    - `PoSh-Backup.ps1`: Added the `-ExportDiagnosticPackage <FilePath>` parameter and a new `Diagnostics` parameter set.",
    "    - `Modules\Managers\CliManager.psm1`: Updated to recognize the new parameter.",
    "    - `Modules\Managers\CoreSetupManager.psm1`: Updated to pass the new parameter value to `ScriptModeHandler`.",
    "    - `Modules\ScriptModeHandler.psm1`: Implemented the core logic in a new internal function `Invoke-ExportDiagnosticPackageInternal`. This function gathers system info, copies and sanitizes config files by replacing sensitive keys, copies recent logs, and creates the final zip archive.",
    "    - **Bug Fix:** Addressed a PSSA warning for an unused `Logger` parameter in the new internal function.",
    "    - `README.md`: Updated to document the new diagnostic switch.",
    "    - **Status:** The feature is now complete and working as expected.",
    "--- Feature: Enhanced Diagnostic Package Export (Completed in Previous Current Session Segment) ---",
    "    - **Goal:** Enhance the `-ExportDiagnosticPackage` utility to include more detailed and useful troubleshooting information.",
    "    - `Modules\ScriptModeHandler.psm1` (v1.11.x -> v1.13.2):",
    "        - The internal diagnostic function was significantly updated to gather more data.",
    "        - **Module Versions:** Correctly parses module versions from comment blocks instead of relying on `Get-Module`.",
    "        - **Disk Space Report:** Added a report of all fixed drives with total size, free space, and percentage free.",
    "        - **Permissions (ACL) Report:** Added a report showing the Access Control Lists for key project and destination directories.",
    "        - **Human-Readable Config Diff:** Replaced the default `Compare-Object` output with a much clearer, recursive diff function that shows exactly which settings were added or modified in `User.psd1`.",
    "    - **Bug Fixes:**",
    "        - Fixed a recurring `Cannot convert the... value of type 'System.String' to type 'System.Collections.Generic.IEnumerable'` error by ensuring the recursive diff function always returns a collection.",
    "        - Fixed an incorrect disk space calculation caused by an order-of-operations error.",
    "        - Fixed an incorrect relative path calculation that was truncating the start of some module paths in the report.",
    "    - `README.md`: Updated to reflect the new contents of the diagnostic package.",
    "    - **Status:** The feature is now complete and working as expected.",
    "--- Refactoring: ScriptModeHandler (Completed in Previous Current Session Segment) ---",
    "    - **Goal:** Further modularize the project by decomposing the large `ScriptModeHandler.psm1`.",
    "    - **New Directory:** Created `Modules\ScriptModes\` to house the new, more focused modules.",
    "    - **New Modules Created:**",
    "        - `Modules\ScriptModes\Diagnostics.psm1`: Handles `-TestConfig`, `-GetEffectiveConfig`, and `-ExportDiagnosticPackage`.",
    "        - `Modules\ScriptModes\ArchiveManagement.psm1`: Handles `-ListArchiveContents`, `-ExtractFromArchive`, `-PinBackup`, and `-UnpinBackup`.",
    "        - `Modules\ScriptModes\Listing.psm1`: Handles `-ListBackupLocations`, `-ListBackupSets`, and `-Version`.",
    "        - `Modules\ScriptModes\MaintenanceAndVerification.psm1`: Handles `-Maintenance` and `-RunVerificationJobs`.",
    "    - **Refactoring:** `ScriptModeHandler.psm1` was refactored into a lightweight facade that now delegates execution to the appropriate new sub-module.",
    "    - **Bug Fixes:**",
    "        - Corrected a parameter name mismatch (`PSCmdletInstance`) in `CoreSetupManager.psm1` when calling the script mode handler.",
    "        - Fixed a logic bug where maintenance mode was being incorrectly triggered on normal backup runs.",
    "--- Feature: Retention Safety (Test Before Delete) & Bug Fixes (Completed in Previous Current Session Segment) ---",
    "    - **Goal:** Add a safety check to verify an old archive's integrity before retention deletes it, and fix related bugs in the retention scanner.",
    "    - `Config\\Default.psd1`: Added `TestArchiveBeforeDeletion = `$false` to job definitions.",
    "    - `Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`: Updated schema to include the new `TestArchiveBeforeDeletion` boolean key.",
    "    - `Modules\\ConfigManagement\\EffectiveConfigBuilder\\OperationalSettings.psm1`: Modified to resolve the new `TestArchiveBeforeDeletion` setting.",
    "    - `Modules\\Managers\\RetentionManager\\Deleter.psm1`: Implemented the core logic. Before deleting, it now optionally calls `Test-7ZipArchive` on the old archive. If the test fails, deletion of that instance is aborted and a critical error is logged.",
    "    - **Bug Fix (Scanner):** Corrected the retention scanner logic in `Modules\\Managers\\RetentionManager\\Scanner.psm1`. It now dynamically builds its date-matching regex from the job's `ArchiveDateFormat` setting, fixing a critical bug where it failed to find archives using a non-default date format.",
    "    - **Bug Fix (Off-by-One):** Corrected the retention count logic in `Modules\\Managers\\RetentionManager.psm1`, which was previously keeping `N-1` archives instead of the configured `N`. It now correctly skips the specified number of archives.",
    "    - `Modules\\Managers\\RetentionManager.psm1`: Facade updated to accept the full `$EffectiveJobConfig` to pass settings down to the deleter.",
    "    - `Modules\\Core\\Operations\\JobExecutor.LocalRetentionHandler.psm1`: Updated to pass the full effective configuration to the retention manager.",
    "--- Feature: CLI Auto-Completion (Completed in Previous Current Session Segment) ---",
    "    - **Goal:** Add tab-completion for job and set names to improve usability.",
    "    - **New Module:** Created `Modules\\Utilities\\ArgumentCompleters.psm1` to house the completion logic, keeping the main script clean.",
    "    - `PoSh-Backup.ps1` (v1.28.0 -> v1.29.0):",
    "        - Imports the new `ArgumentCompleters.psm1` module.",
    "        - Decorates the `-BackupLocationName`, `-RunSet`, `-SkipJob`, and `-GetEffectiveConfig` parameters with the `[ArgumentCompleter({ ... })]` attribute.",
    "    - **Bug Fix:** Corrected the syntax for the `ArgumentCompleter` from `[scriptblock]::Create(...)` to the required `{ ... }` script block literal to resolve parsing errors.",
    "    - **Status:** Tab-completion for job and set names is now active.",
    "--- Feature: S3-Compatible Backup Target (Completed in Previous Current Session Segment) ---",
    "    - **Goal:** Add support for backing up to S3-compatible object storage like MinIO or AWS S3.",
    "    - **New Module:** Created `Modules\\Targets\\S3.Target.psm1` with validation and transfer logic.",
    "    - **Configuration:** Added an S3 target example to `Config\\Default.psd1` and updated the schema in `Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`.",
    "    - **Bug Fix (Secret Management):** Corrected the dependency check in `Modules\\Managers\\CoreSetupManager.psm1` to properly detect when S3 secrets are required, preventing interactive prompts when no vault is registered.",
    "    - **Bug Fix (CommandNotFoundException):** Corrected a typo in `Modules\\Operations\\RemoteTransferOrchestrator.psm1` that was calling a non-existent function for formatting transfer sizes.",
    "    - **Bug Fix (S3 Provider):** Corrected the `S3.Target.psm1` module to use the correct `-EndpointUrl` and `-Region` parameters for `AWS.Tools.S3` cmdlets instead of the non-existent `-S3ClientConfig`.",
    "    - **Bug Fix (S3 Provider):** Fixed a cosmetic bug in a debug log line in `S3.Target.psm1` that was referencing an incorrect variable for the job name.",
    "    - **Documentation:** Updated `README.md` to include the new S3 provider in the features list, prerequisites, and configuration examples.",
    "    - **Status:** The S3 Target Provider is now fully functional.",
    "--- Feature: Configurable Action on Missing Source Path (Current Session Segment) ---",
    "    - **Goal:** Allow users to define how a job behaves if a source path is not found (e.g., disconnected network drive).",
    "    - `Config\\Default.psd1`: Added `OnSourcePathNotFound` setting to the example job ('FailJob', 'WarnAndContinue', 'SkipJob').",
    "    - `Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`: Updated schema to validate the new setting.",
    "    - `Modules\\ConfigManagement\\EffectiveConfigBuilder\\OperationalSettings.psm1`: Modified to resolve the new setting.",
    "    - `Modules\\Operations\\JobPreProcessor.psm1`: Logic rewritten to correctly handle wildcard paths and implement the new policies. Now returns a detailed status (`Proceed`, `SkipJob`, `FailJob`).",
    "    - `Modules\\Core\\Operations\\JobExecutor.psm1` & `Modules\\Core\\JobOrchestrator.psm1`: Updated to handle the new `SKIPPED_SOURCE_MISSING` status for dependency and set-level logic.",
    "    - **Bug Fix:** A persistent `ParameterBindingException` during error handling was traced to incorrect logic for wildcard path validation in `JobPreProcessor.psm1`. This was definitively fixed by using `Test-Path -Path` instead of `-LiteralPath` on a parsed parent directory.",
    "--- PROJECT STATUS ---",
    "Overall: PoSh-Backup.ps1 is highly modular, with utility modes now broken into sub-modules under `Modules\ScriptModes\`. Core backup/restore functionality is stable. Key features include archive listing/extraction, comprehensive backup pinning, a context-aware dependency checker, robust parameter set handling, and Hyper-V snapshot orchestration. PSSA warnings: 2 (known password-related warnings).""Overall: PoSh-Backup.ps1 is highly modular, with utility modes now broken into sub-modules under Modules\ScriptModes`. Core backup/restore functionality is stable. Key features include archive listing/extraction, comprehensive backup pinning, a context-aware dependency checker, robust parameter set handling, Hyper-V snapshot orchestration, and a new S3-compatible target provider. PSSA warnings: 2 (known password-related warnings)."
  )

  main_script_poSh_backup_version = "1.31.0 # Added configurable action for missing source paths."

  ai_bundler_update_instructions  = @{
    purpose                            = "Instructions for AI on how to regenerate the content of the AI state hashtable by providing the content for 'Meta\\AIState.template.psd1' when requested by the user."
    when_to_update                     = "Only when the user explicitly asks to 'update the bundler script's AI state'."
    example_of_ai_provided_block_start = "# Meta\\AIState.template.psd1"
    output_format_for_ai               = "Provide the updated content for 'Meta\\AIState.template.psd1' as a complete PowerShell data file string, ready for copy-pasting. Ensure strings are correctly quoted and arrays use PowerShell syntax, e.g., `@('item1', 'item2')`. Placeholders like '__BUNDLER_VERSION_PLACEHOLDER__' should be kept as literal strings in the template provided by AI; they will be dynamically replaced by the bundler script."
    reminder_for_ai                    = "When asked to update this state, proactively consider if any recent challenges or frequent corrections should be added to the 'ai_development_watch_list'. The AI should provide the *full content* of the AIState.template.psd1 file, not just a PowerShell 'aiStateVariable = @{...}' block for a .psm1 file."
    fields_to_update_by_ai             = @(
      "ai_development_watch_list",
      "ai_bundler_update_instructions",
      "external_dependencies.executables",
      "external_dependencies.powershell_modules"
    )
    fields_to_be_updated_by_user       = @(
      "external_dependencies.executables (if new external tools are added - AI cannot auto-detect this reliably if path is not hardcoded/standard)"
    )
    example_of_ai_provided_block_end   = "}"
  }

  module_descriptions             = @{
    "__MODULE_DESCRIPTIONS_PLACEHOLDER__" = "This is a placeholder entry that is dynamically populated by the bundler script based on the synopsis of each project file."
  }

  project_root_folder_name        = "__PROJECT_ROOT_NAME_PLACEHOLDER__"
  project_name                    = "PoSh Backup Solution"

  external_dependencies           = @{
    executables        = @(
      "7z.exe (7-Zip command-line tool - path configurable or auto-detected)",
      "powercfg.exe (Windows Power Configuration Utility - for Hibernate check)",
      "rundll32.exe (Windows utility - for Hibernate, Sleep, Lock actions)",
      "shutdown.exe (Windows utility - for Shutdown, Restart, LogOff actions)"
    )
    powershell_modules = @(
      "Posh-SSH (for SFTP target provider)" # Assuming this is still a direct dependency for SFTP.Target.psm1
      # Microsoft.PowerShell.SecretManagement is a system component, not typically listed as an external module to *bundle*.
    )
  }
}

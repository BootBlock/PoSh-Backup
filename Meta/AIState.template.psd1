# Meta\AIState.template.psd1
@{
  bundle_generation_time          = "__BUNDLE_GENERATION_TIME_PLACEHOLDER__"
  bundler_script_version          = "__BUNDLER_VERSION_PLACEHOLDER__" # Populated by bundler

  ai_development_watch_list       = @(
    "CRITICAL (AI): ENSURE FULL, UNTRUNCATED FILES ARE PROVIDED WHEN REQUESTED. This was a REPEATED, CATASTROPHIC FAILURE during the 'Replicate' target provider development, AGAIN during 'PostRunAction' (README.md, Default.psd1, ConfigManager.psm1), and AGAIN during 'SFTP Target' (README.md). EXTREME VIGILANCE AND A CHANGE IN AI STRATEGY (e.g., AI requesting user to provide baselines for complex/long files, AI providing diffs/patches) IS REQUIRED. User had to provide baselines multiple times.",
    "CRITICAL (AI): VERIFY LINE COUNTS AND COMMENT INTEGRITY when AI provides full script updates. Inadvertent removal/truncation has occurred repeatedly. This was a significant issue in the last session and a CATASTROPHIC issue in the current session. EXTREME VIGILANCE REQUIRED.",
    "CRITICAL (AI): Ensure no extraneous trailing whitespace is introduced on any lines, including apparently blank ones when providing code.",
    "CRITICAL (AI): When modifying existing files, EXPLICITLY CONFIRM THE BASELINE VERSION/CONTENT if there's ANY ambiguity. If providing full files, state the assumed baseline. If errors persist, switch to providing diffs/patches against a user-provided baseline, or ask user to make manual changes based on AI instructions.",
    "CRITICAL (SYNTAX): For literal triple backticks (```) in PowerShell strings meant for Markdown code fences, use single quotes: '''```'''. For example, using 'theSBvariable.AppendLine('''''''```''''''')' with single quotes for the outer string. Double quotes for the outer string will cause parsing errors or misinterpretation.",
    "CRITICAL (SYNTAX): Escaping special characters (like `$`, `{`, `}` within regex patterns) in PowerShell here-strings for JavaScript requires extreme care. PowerShell's parser may interpret sequences like `${}` as empty variable expressions. Methods like string concatenation within the JS, or careful backtick escaping (`$`) are needed.",
    "CRITICAL (SYNTAX): When providing replacement strings for PowerShell's -replace operator that include special characters (e.g., HTML entities like '<'), ensure these replacement strings are correctly quoted (typically single quotes) to be treated as literal strings by PowerShell.",
    'CRITICAL (SYNTAX - PSD1/Strings): When generating PowerShell data files (.psd1) or strings that will be parsed by `Import-PowerShellDataFile` or similar, be extremely careful with nested quotes and variable expansion syntax like $($variable.Property). If a variable might be null or a property might not exist, this can lead to parsing errors (e.g., ''$()'' is invalid). Use string formatting (`-f`) or ensure variables/properties are resolved to actual values *before* embedding them in such strings, or use intermediate variables with checks.',
    "SYNTAX: PowerShell ordered dictionaries (`[ordered]@{}`) use `(theDictVariable.PSObject.Properties.Name -contains 'Key')`, NOT `theDictVariable.ContainsKey('Key')`. ",
    "REGEX: Be cautious with string interpolation vs. literal characters in regex patterns. Test regex patterns carefully. Ensure PowerShell string parsing is correct before regex engine sees it.",
    "LOGIC: Verify `IsSimulateMode` flag is consistently propagated and handled, especially for I/O operations and status reporting, including through new Backup Target provider models and PostRunAction feature.",
    "DATA FLOW: Ensure data for reports (like `IsSimulationReport`, `OverallStatus`, `VSSStatus`, `VSSAttempted`, and new `TargetTransfers` array with its `ReplicationDetails`) is correctly set in `theReportDataRefRef` (a ref object) *before* report generation functions are called.",
    "SCOPE: Double-check variable scopes. `$Global:StatusToColourMap` and associated `$Global:Colour<Name>` variables in `PoSh-Backup.ps1` must be correctly defined and accessible when `Write-LogMessage` (exported by `Utils.psm1` facade, sourced from `Logging.psm1`) is invoked, even during early module loading or from deeply nested calls. An explicit 'ERROR' key in the map resolved a color issue.",
    "STRUCTURE: Respect the modular design. Ensure functions are placed in the most logical module. New target providers go in Modules\\Targets`. Manager modules (e.g. SystemStateManager.psm1, 7ZipManager.psm1) now reside in Modules\\Managers\\. Ensure new sub-modules (e.g., under Modules\\Core\\, Modules\\Operations\\, Modules\\ConfigManagement\\, Modules\\Utilities\\, Modules\\Managers\\) are correctly structured and imported.", # UPDATED
    "BRACES/PARENS: Meticulously check for balanced curly braces `{}`, parentheses `()`, and square brackets `[]` in all generated code.",
    "PSSA (BUNDLER): Bundler's `Invoke-ScriptAnalyzer` summary may not perfectly reflect all suppressions from `PSScriptAnalyzerSettings.psd1` or inline suppressions, even if VS Code shows no issues. This was observed with `PSUseApprovedVerbs`. The interpretation of 'empty catch block' also needs attention; ensure catch blocks either `throw` or use `Write-Error` explicitly if PSSA continues to flag them despite logging.",
    "PSSA (CMDLET VERBS): Ensure new public functions follow approved verbs. If a plural noun seems descriptive for an internal orchestrator (e.g. `Invoke-AllRemoteTargetTransfers`), discuss if renaming (e.g. `Invoke-RemoteTargetTransferOrchestration`) or suppression is preferred. Strict adherence was chosen in recent refactoring.",
    "PSSA (CLOSURES): PSScriptAnalyzer may not always detect parameter/variable usage within scriptblock closures assigned to local variables (e.g., `$LocalWriteLog` wrappers using a `$Logger` parameter from parent scope). Explicit, direct calls to the parameter within the main function body might be needed for PSSA appeasement.",
    "PESTER (SESSION): Current Pester tests are non-functional. No work done in this session.",
    "CRITICAL (PSD1_PARSING): `Import-PowerShellDataFile` can unexpectedly fail with 'dynamic expression' errors on double-quoted strings containing backtick-escaped `\$` if the overall string structure is complex. Safest to rephrase or use single-quoted strings.",
    "LOGIC (CONFIRMATION): The interaction between `[CmdletBinding(SupportsShouldProcess=`$true, ConfirmImpact='...')`, `$PSCmdlet.ShouldProcess()`, `$ConfirmPreference`, and explicit `-Confirm` parameters is complex. Test confirmation flows carefully, especially for new PostRunAction feature and target provider operations.",
    "LOGIC (PATH_CREATION): `New-Item -ItemType Directory -Force` on UNC paths may not create intermediate parent directories robustly. Iterative path component creation is more reliable for UNC destinations (as implemented in `UNC.Target.psm1`'s `Initialize-RemotePathInternal`). SFTP provider also needs robust remote path creation.",
    "LOGIC (POST_RUN_ACTION): Ensure the hierarchy for PostRunAction (CLI > Set > Job > Global Defaults) is correctly implemented and that `-Simulate` and `-TestConfig` modes properly simulate without executing system state changes.",
    "VERBS: Ensure all new functions use approved PowerShell verbs. If an unapproved verb seems most descriptive for an internal helper, discuss with the user or use a PSScriptAnalyzer suppression with justification.",
    "AI STRATEGY (ACCURACY): When providing new or updated full files, ALWAYS perform a mental diff against the presumed baseline. State the estimated line count difference (e.g., '+15 lines', '-5 lines', 'approx. +/- 10 lines for significant refactoring'). This helps the user quickly gauge the scope of changes and verify completeness, especially for longer files. If the changes are extensive or involve complex refactoring, explicitly mention this as well.",
    "AI STRATEGY (OUTPUT): Provide only one file at a time for review and integration, UNLESS explicitly requested otherwise by the user OR if multiple files are very small (e.g., less than ~20-30 lines each) and closely related, in which case confirm with the user if a combined provision is acceptable. This helps manage UI limitations and focused review.",
    "PESTER (v5.7.1 Environment - Key Learnings & Workarounds):",
    "  - **Pattern A: Testing ACTUAL IMPORTED Module Functions (e.g., for `ConfigUtils.Tests.ps1`):**",
    "    1. `BeforeAll`: `Import-Module Utils.psm1` (the facade). Get command reference: `$script:FuncRef = Get-Command Utils\MyFunction`.",
    "    2. `BeforeEach` (in `Context`): Set up test data using `$script:` scope: `$script:testData = @{...}`.",
    "    3. `It`: Call `& `$script:FuncRef -Parameter `$script:testData`. This pattern *now works* for `Get-ConfigValue`, indicating parameter binding for imported functions can succeed with careful data scoping.",
    "  - **Pattern B: Testing LOCAL COPIES of Function Logic (e.g., for `FileUtils.Tests.ps1`):**",
    "    1. Top-level of `.Tests.ps1`: Define dummy functions (e.g., `function Write-LogMessage {}`). Define local copies of functions under test (e.g., `function Get-ArchiveSizeFormatted-LocalTest {...}`).",
    "    2. `BeforeAll`:",
    "       a. Dot-source self: `. `$MyInvocation.MyCommand.ScriptBlock.File` (makes dummies and local test functions available).",
    "       b. Mock dependencies: `Mock Write-LogMessage -MockWith { ... } -Verifiable`.",
    "       c. Get `$script:` references to local test functions: `$script:fnGetSize = `${function:Get-ArchiveSizeFormatted-LocalTest}`.",
    "    3. `It` blocks:",
    "       a. Call local functions via `$script:` reference: `& `$script:fnGetSize ...`.",
    "       b. Local functions call mocked dependencies (e.g., `Write-LogMessage`) directly by name.",
    "       c. Assert mock calls: `Should -Invoke -CommandName Write-LogMessage -Times X -ParameterFilter {...}`.",
    "       d. For external cmdlets (e.g., `Get-FileHash`): Make them injectable `[scriptblock]` parameters in the local test function, defaulting to the real cmdlet. Pass a mock scriptblock in specific tests.",
    "  - **General Pester 5 Notes for This Environment:**",
    "    - Parameter Binding to External Modules: Was initially problematic. Success with Pattern A suggests issues might have been compounded by unstable test script structure or Pester syntax errors during early attempts. The combination of `Import-Module`, `Get-Command` for the reference, and `$script:`-scoped data in `BeforeEach` seems to be the key for imported functions.",
    "    - `$MyInvocation.MyCommand.ScriptBlock.File`: Reliable for self dot-sourcing in `BeforeAll`.",
    "    - Array Type Assertion: `(`$result.GetType().IsArray) | Should -Be `$true` is robust.",
    "    - Log Array for Mocking: If using `Should -Invoke`, a shared log array might not be strictly necessary for simple call/parameter assertions, but can be useful for debugging the mock's `-MockWith` block. Ensure it's cleared in `BeforeEach` (e.g., `$script:logArray = @()`).",
    "    - PSSA `PSUseDeclaredVarsMoreThanAssignments`: Can be triggered by `$var = `$null` at `Context` level if `$var` is only (re)assigned in `BeforeEach`. Remove initial `$null` as `BeforeEach` will define it. Use `$script:var` in `BeforeEach` if shared across `It` blocks or with `AfterEach`.",
    "SYNTAX (PSSA): `$null` should be on the left side of equality comparisons (e.g., `if (`$null -eq `$variable)` not `if (`$variable -eq `$null)`)."
  )

  conversation_summary            = @(
    "Development of a comprehensive PowerShell file backup solution (PoSh-Backup.ps1 v1.13.0).", # Updated version
    "Modular design: Core modules (Modules\\Core\\), Reporting sub-modules (Modules\\Reporting\\Assets), ConfigManagement sub-modules (Modules\\ConfigManagement\\Assets), Utilities sub-modules (Modules\\Utilities\\), Manager modules (now in Modules\\Managers\\), Config files, and Meta/ (bundler).", # Updated structure
    "AI State structure is loaded from 'Meta\\AIState.template.psd1' and dynamically populated by Bundle.StateAndAssembly.psm1 (v1.1.15).",
    "--- Refactor: Manager Modules (Current Session Segment) ---",
    "  - Goal: Improve project organization by centralizing manager-type modules.",
    "  - New subdirectory `Modules\\Managers\\` created.",
    "  - Moved manager modules to `Modules\\Managers\\`:",
    "    - ``7ZipManager.psm1``",
    "    - ``HookManager.psm1``",
    "    - ``LogManager.psm1``",
    "    - ``PasswordManager.psm1``",
    "    - ``RetentionManager.psm1``",
    "    - ``SystemStateManager.psm1``",
    "    - ``VssManager.psm1``",
    "  - Updated `Import-Module` paths in affected files:",
    "    - `PoSh-Backup.ps1`: For `7ZipManager`, `VssManager`, `RetentionManager`, `HookManager`, `SystemStateManager`.",
    "    - `Modules\\ConfigManagement\\ConfigLoader.psm1`: For `7ZipManager`.",
    "    - `Modules\\Core\\JobOrchestrator.psm1`: For `LogManager`.",
    "    - `Modules\\Core\\Operations.psm1`: For `PasswordManager`, `HookManager`, `VssManager`, `RetentionManager`.",
    "    - `Modules\\Managers\\7ZipManager.psm1`: Updated its internal import of `Utils.psm1` to use `..\\Utils.psm1`.",
    "    - `Modules\\Operations\\LocalArchiveProcessor.psm1`: Updated its import of `7ZipManager.psm1` to `..\\Managers\\7ZipManager.psm1`.",
    "  - All changes tested successfully by the user.",
    "--- Feature: Log File Retention (Completed in Current Session Segment) ---",
    "  - Goal: Manage retention of generated log files to prevent indefinite growth of the Logs/ directory.",
    "  - `Config\\Default.psd1` (v1.4.2 -> v1.4.3): Added global `DefaultLogRetentionCount`, job-level `LogRetentionCount`, and set-level `LogRetentionCount` settings. A value of 0 means infinite retention.",
    "  - `Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`: Updated for new `LogRetentionCount` settings (global, job, set) with validation (integer, min 0).",
    "  - `PoSh-Backup.ps1` (v1.12.3 -> v1.13.0): Added `-LogRetentionCountCLI` parameter and included it in CLI override logic.",
    "  - `Modules\\ConfigManagement\\EffectiveConfigBuilder.psm1` (v1.0.6 -> v1.0.7): Modified to resolve `LogRetentionCount` for a job (CLI > Job > Global) and add to report data.",
    "  - New Module `Modules\\Managers\\LogManager.psm1` (v1.0.0) created (moved from `Modules\\` to `Modules\\Managers\\` during refactor): Contains `Invoke-LogFileRetention`.",
    "  - `Modules\\Utils.psm1` (v1.13.3): No longer facades `LogManager.psm1`.",
    "  - `Modules\\Core\\JobOrchestrator.psm1` (v1.0.1 -> v1.0.2): Imports `LogManager.psm1` from `Modules\\Managers\\` and calls `Invoke-LogFileRetention`.",
    "  - `README.md`: Updated with Log File Retention feature details, configuration options, and CLI parameter.",
    "  - All changes tested successfully by the user after correcting initial file placement and import paths for `LogManager.psm1`.",
    "  - PSSA warning `PSPossibleIncorrectComparisonWithNull` identified and manually fixed by user in `JobOrchestrator.psm1` and `PoSh-Backup.ps1`. Added to AI Watch List.",
    "--- Feature: CPU Affinity/Core Limiting for 7-Zip (Completed in Previous Session Segment) ---",
    "  - Goal: Allow restricting 7-Zip to specific CPU cores for finer-grained resource control.",
    "  - `Config\\Default.psd1` (v1.4.0 -> v1.4.1): Added global DefaultSevenZipCpuAffinity and job-level SevenZipCpuAffinity settings.",
    "  - `Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`: Updated for SevenZipCpuAffinity.",
    "  - `Modules\\ConfigManagement\\EffectiveConfigBuilder.psm1` (v1.0.3 -> v1.0.5): Modified to resolve SevenZipCpuAffinity (including CLI override) and add to report data.",
    "  - `Modules\\7ZipManager.psm1` (v1.0.8 -> v1.0.12 - now in Modules\\Managers\\):",
    "    - Invoke-7ZipOperation modified to accept SevenZipCpuAffinityString, validate against system cores, clamp values, parse (list or hex), and apply via Start-Process.",
    "    - Renamed internal TempPasswordFile parameter to TempPassFile to avoid PSSA warnings.",
    "  - `PoSh-Backup.ps1` (v1.12.1 -> v1.12.2): Added -SevenZipCpuAffinityCLI parameter and override logic.",
    "  - `README.md`: Updated with CPU Affinity feature details, configuration, and CLI override.",
    "  - All changes tested successfully by the user.",
    "--- Pester Testing - Phase 1: Utilities (Previous Session Segment) ---", # Changed from "Current" to "Previous"
    "  - Goal: Re-establish Pester testing for utility functions.",
    "  - Environment: Pester 5.7.1 confirmed as active.",
    "  - `ConfigUtils.Tests.ps1` (for `Get-ConfigValue` from imported `Utils.psm1`):",
    "    - Initial attempts to test the module function (imported or dot-sourced) failed due to parameters arriving as `$null` inside `Get-ConfigValue` when called from Pester `It` blocks.",
    "    - `InModuleScope -ArgumentList` also failed to pass arguments to its scriptblock.",
    "    - **Successful Pattern A:** `Import-Module Utils.psm1` in `BeforeAll`, then `$script:FuncRef = Get-Command Utils\\Get-ConfigValue`. Test data set in `BeforeEach` with `$script:` scope. `It` blocks call `& `$script:FuncRef -Parameter `$script:testData``. All 12 tests PASSING.",
    "    - This confirms that testing functions from imported modules *can* work with correct data scoping and function referencing.",
    "  - `FileUtils.Tests.ps1` (for `Get-ArchiveSizeFormatted`, `Get-PoshBackupFileHash`):",
    "    - **Successful Pattern B (Local Logic Copy):** Functions' logic copied into test script (defined top-level). `BeforeAll` self dot-sources, then mocks `Write-LogMessage`, then gets `$script:` references to local test functions. `It` blocks call these references.",
    "    - **Logger Mocking Strategy:**",
    "      1. Dummy `Write-LogMessage` defined top-level in test script.",
    "      2. `BeforeAll` self dot-sources the test script.",
    "      3. `BeforeAll` then `Mock Write-LogMessage -MockWith { ...capture... } -Verifiable`.",
    "      4. Local test functions call `Write-LogMessage` directly (which hits the mock).",
    "      5. Assertions use `Should -Invoke Write-LogMessage -Times X -ParameterFilter {...}`.",
    "    - **`Get-FileHash` Mocking Strategy (for error handling test):**",
    "      1. Modified local copy of `Get-PoshBackupFileHash` to accept an optional `[scriptblock]`$InjectedFileHashCommand`` parameter (defaulting to `(Get-Command Get-FileHash)`).",
    "      2. Test injects a throwing scriptblock for this parameter.",
    "    - **Current Status:** All 12 tests for `FileUtils.Tests.ps1` are now passing with these strategies.",
    "  - Key Pester 5.7.1 findings for this environment (added to AI Watch List): Emphasized the 'local function copy' workaround (Pattern B) and the direct import pattern (Pattern A). Detailed successful mocking and data scoping strategies.",
    "  - Next Steps: Re-create `SystemUtils.Tests.ps1` using these established patterns.",
    "--- Feature: Self-Extracting Archives (SFX) (Completed in a Previous Session Segment) ---",
    "  - Goal: Option to create self-extracting archives (.exe) for easier restoration, with user-selectable SFX module type.",
    "  - Stage 1 (Basic SFX):",
    "    - `Config\\Default.psd1` (v1.3.8 -> v1.3.9): Added global `DefaultCreateSFX` and job-level `CreateSFX` settings.",
    "    - `Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`: Updated for `DefaultCreateSFX` and `CreateSFX`.",
    "    - `Modules\\ConfigManagement\\EffectiveConfigBuilder.psm1` (v1.0.1 -> v1.0.2): Modified to resolve `CreateSFX` and force `.exe` extension if true, storing original extension as `InternalArchiveExtension`.",
    "    - `Modules\\7ZipManager.psm1` (v1.0.6 -> v1.0.7 - now in Modules\\Managers\\): Modified `Get-PoShBackup7ZipArgument` to add `-sfx` switch if `CreateSFX` is true.",
    "    - `Modules\\Operations\\LocalArchiveProcessor.psm1` (v1.0.3 -> v1.0.4): Ensured `JobArchiveExtension` (which could be `.exe`) is used for archive naming.",
    "    - `README.md`: Updated with SFX feature details and configuration examples.",
    "  - Stage 2 (SFX Module Option):", # Changed from "Current Session Segment"
    "    - `Config\\Default.psd1` (v1.3.9 -> v1.4.0): Added global `DefaultSFXModule` and job-level `SFXModule` settings (options: Console, GUI, Installer).",
    "    - `Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`: Updated for `DefaultSFXModule` and `SFXModule` with allowed values.",
    "    - `Modules\\ConfigManagement\\EffectiveConfigBuilder.psm1` (v1.0.2 -> v1.0.3): Modified to resolve `SFXModule` setting.",
    "    - `Modules\\7ZipManager.psm1` (v1.0.7 -> v1.0.8 - now in Modules\\Managers\\): Modified `Get-PoShBackup7ZipArgument` to use the resolved `SFXModule` to select the appropriate `-sfx[module_name.sfx]` switch.",
    "    - `Modules\\Operations\\LocalArchiveProcessor.psm1` (v1.0.4 -> v1.0.5): Added `SFXModule` to report data.",
    "    - `README.md`: Updated to describe `SFXModule` options and examples.",
    "  - All changes tested successfully by the user.",
    "--- Refactoring of PoSh-Backup.ps1 and Core Modules (Previous Session Segment) ---",
    "  - Goal: Further modularise PoSh-Backup.ps1 by extracting its main job processing loop.",
    "  - New subdirectory `Modules\\Core\\` created.",
    "  - New module `Modules\\Core\\JobOrchestrator.psm1` (v1.0.1) created to handle the main job/set processing loop.",
    "  - `Modules\\ConfigManager.psm1` (v1.2.0 -> v1.2.1) moved to `Modules\\Core\\ConfigManager.psm1`; internal paths updated.",
    "  - `Modules\\Operations.psm1` (v1.19.5 -> v1.20.0) moved to `Modules\\Core\\Operations.psm1`; internal paths updated.",
    "  - `PoSh-Backup.ps1` (v1.11.5 -> v1.12.1) significantly refactored:",
    "    - Main job processing loop delegated to `Invoke-PoShBackupRun` in `JobOrchestrator.psm1`.",
    "    - Imports updated for modules now in `Modules\\Core\\`.",
    "    - Workaround implemented (local re-import of `Utils.psm1`) to address module scoping issue where `Utils.psm1` commands became unavailable after returning from `JobOrchestrator.psm1`.",
    "  - All changes tested successfully by the user.",
    "--- Refactoring of Utils.psm1 (Previous Session Segment) ---",
    "  - Goal: Improve organisation and maintainability of utility functions.",
    "  - `Modules\\Utils.psm1` (v1.12.0 -> v1.13.3) refactored into a facade module.",
    "  - New subdirectory `Modules\\Utilities\\` created.",
    "  - New utility sub-modules created:",
    "    - `Modules\\Utilities\\Logging.psm1` (v1.0.0): Contains `Write-LogMessage`.",
    "    - `Modules\\Utilities\\ConfigUtils.psm1` (v1.0.0): Contains `Get-ConfigValue`.",
    "    - `Modules\\Utilities\\SystemUtils.psm1` (v1.0.0): Contains `Test-AdminPrivilege`, `Test-DestinationFreeSpace`.",
    "    - `Modules\\Utilities\\FileUtils.psm1` (v1.0.0): Contains `Get-ArchiveSizeFormatted`, `Get-PoshBackupFileHash`.",
    "  - `Modules\\Utils.psm1` now imports and re-exports functions from these sub-modules.",
    "  - Terminology for `DestinationDir` clarified in `Config\\Default.psd1`, `README.md`, `Operations.psm1`, and `LocalArchiveProcessor.psm1` to reflect its dual role (final destination vs. local staging area).",
    "  - PSSA 'empty catch block' warning in `Operations.psm1` addressed by adding a debug log message.",
    "  - All changes tested successfully by the user.",
    "--- Further Modularisation of PoSh-Backup.ps1 and ReportingHtml.psm1 (Previous Session) ---",
    "  - Goal: Reduce size of larger script files for AI efficiency and improve maintainability.",
    "  - `PoSh-Backup.ps1` (v1.11.4 -> v1.11.5 - before Core refactor) refactored:",
    "    - Logic for `-ListBackupLocations`, `-ListBackupSets`, and `-TestConfig` modes moved to a new module.",
    "    - New module: `Modules\\ScriptModeHandler.psm1` (v1.0.0) created to handle these informational modes, which calls `exit` internally.",
    "    - This significantly reduced the line count of `PoSh-Backup.ps1` (approx. -90 lines).",
    "  - `Modules\\Reporting\\ReportingHtml.psm1` (v1.9.2 -> v1.9.10) refactored in two stages:",
    "    - Stage 1: Client-side JavaScript externalised to `Modules\\Reporting\\Assets\\ReportingHtml.Client.js`.",
    "    - Stage 2: Static HTML structure aggressively externalised to `Modules\\Reporting\\Assets\\ReportingHtml.template.html`.",
    "    - `ReportingHtml.psm1` now primarily handles data processing and injection into the HTML template, significantly reducing its line count.",
    "  - `Modules\\PoShBackupValidator.psm1` (v1.3.6 -> v1.4.0) refactored:",
    "    - Embedded schema definition (`$Script:PoShBackup_ConfigSchema`) moved to an external file: `Modules\\ConfigManagement\\Assets\\ConfigSchema.psd1`.",
    "    - `PoShBackupValidator.psm1` now loads the schema from this external file, significantly reducing its own size.",
    "  - PSSA warning for unused Logger parameter in `ReportingHtml.psm1` (v1.9.10) addressed by adding a direct call to the logger.",
    "  - Console blank line issue during HTML report generation investigated and resolved by refactoring internal logger helper in `ReportingHtml.psm1` and removing temporary diagnostic lines.",
    "--- Major Refactoring: Modularisation of Operations.psm1 and ConfigManager.psm1 (Previous Session) ---",
    "  - Goal: Improve maintainability, readability, and testability of large modules.",
    "  - `Operations.psm1` (v1.18.6 -> v1.19.5 - before move to Core, now in Modules\\Core\\) refactored:",
    "    - Now acts as an orchestrator for job lifecycle stages.",
    "    - New sub-module: `Modules\\Operations\\LocalArchiveProcessor.psm1` (v1.0.3) created.",
    "    - New sub-module: `Modules\\Operations\\RemoteTransferOrchestrator.psm1` (v1.0.1) created.",
    "  - `ConfigManager.psm1` (v1.1.5 -> v1.2.0 - before move to Core, now in Modules\\Core\\) refactored:",
    "    - Now acts as a facade for configuration management functions.",
    "    - New sub-module: `Modules\\ConfigManagement\\ConfigLoader.psm1` (v1.0.0) created.",
    "    - New sub-module: `Modules\\ConfigManagement\\JobResolver.psm1` (v1.0.1) created.",
    "    - New sub-module: `Modules\\ConfigManagement\\EffectiveConfigBuilder.psm1` (v1.0.1) created.",
    "  - All refactoring changes tested successfully by the user.",
    "  - PSScriptAnalyzer issues (unused loggers, cmdlet naming, empty catch block) addressed in the new and refactored modules.",
    "  - `SFTP.Target.psm1` updated to v1.0.3 with inline PSSA suppressions for `ConvertTo-SecureString`.",
    "--- Previous Major Feature: Archive Checksum Generation & Verification ---",
    "  - Goal: Enhance archive integrity with optional checksums.",
    "  - Configuration (`Config\\Default.psd1` v1.3.8): Added global and job-level checksum settings.",
    "  - Schema Validation (`Modules\\PoShBackupValidator.psm1` v1.5.2): Updated for checksum settings.",
    "  - Utility Function (`Modules\\Utils.psm1` v1.13.0 - before refactor, current v1.13.3): Added `Get-PoshBackupFileHash`.",
    "  - Operations (`Modules\\Operations.psm1` v1.18.6 - before refactor, now in Modules\\Core\\): Implemented checksum logic.",
    "  - Config Management (`Modules\\ConfigManager.psm1` v1.1.5 - before refactor, now in Modules\\Core\\): Resolved checksum settings.",
    "  - Reporting Modules: Updated to display checksum information.",
    "  - Main Script (`PoSh-Backup.ps1` v1.11.0 - for checksums): Synopsis updated.",
    "  - Documentation (`README.md`): Updated for Checksum feature.",
    "--- Previous Major Feature: Post-Run System Actions (Shutdown, Restart, etc.) ---",
    "  - Goal: Allow PoSh-Backup to perform system state changes after job/set completion.",
    "  - New Module (`Modules\\Managers\\SystemStateManager.psm1` v1.0.2 - path updated).",
    "  - Configuration (`Config\\Default.psd1` v1.3.8 - before checksums & DestinationDir clarification): Added PostRunAction settings.",
    "  - Schema Validation (`Modules\\PoShBackupValidator.psm1` v1.3.5 - before checksums & schema externalisation): Updated.",
    "  - Config Management (`Modules\\ConfigManager.psm1` v1.1.4 - before checksums & major refactor, now in Modules\\Core\\): Updated.",
    "  - Main Script (`PoSh-Backup.ps1` v1.10.1 - for PostRunAction): Updated.",
    "  - Documentation (`README.md`): Updated.",
    "--- Previous Major Feature: Backup Targets (Expanded) ---",
    "  - Goal: Allow backups to be sent to remote locations via an extensible provider model.",
    "  - Configuration (Default.psd1 v1.3.3 - before PostRunAction, Checksums, DestinationDir clarification): Added `BackupTargets`, `TargetNames`, etc.",
    "  - Target Providers: `UNC.Target.psm1` (v1.1.2), `Replicate.Target.psm1` (v1.0.1), `SFTP.Target.psm1` (v1.0.3).",
    "  - Operations.psm1 (v1.17.3 - before PostRunAction, Checksum, & major refactor, now in Modules\\Core\\): Orchestrated target transfers.",
    "  - Reporting Modules: Updated for `TargetTransfers` data.",
    "  - README.md: Updated for 'Replicate' and 'SFTP' target providers.",
    "--- Previous Work (Selected Highlights) ---",
    "Network Share Handling Improvements, Retention Policy Confirmation, HTML Report Enhancements, PSSA compliance.",
    "Bundler Script (Generate-ProjectBundleForAI.ps1 v1.25.2) is stable.",
    "Overall project status: Core local backup stable. Remote targets, Post-Run Actions, Checksums, SFX (with module choice), Log File Retention features added. Extensive refactorings completed (including Manager modules). PSSA summary expected to be clean except for known SFTP ConvertTo-SecureString items. Pester tests for some utilities functional." # Updated
  )

  main_script_poSh_backup_version = "__POSH_BACKUP_VERSION_PLACEHOLDER__" # Will be 1.13.0

  ai_bundler_update_instructions  = @{
    purpose                            = "Instructions for AI on how to regenerate the content of the AI state hashtable by providing the content for 'Meta\\AIState.template.psd1' when requested by the user."
    when_to_update                     = "Only when the user explicitly asks to 'update the bundler script's AI state'."
    example_of_ai_provided_block_start = "# Meta\\AIState.template.psd1"
    output_format_for_ai               = "Provide the updated content for 'Meta\\AIState.template.psd1' as a complete PowerShell data file string, ready for copy-pasting. Ensure strings are correctly quoted and arrays use PowerShell syntax, e.g., `@('item1', 'item2')`. Placeholders like '__BUNDLER_VERSION_PLACEHOLDER__' should be kept as literal strings in the template provided by AI; they will be dynamically replaced by the bundler script."
    reminder_for_ai                    = "When asked to update this state, proactively consider if any recent challenges or frequent corrections should be added to the 'ai_development_watch_list'. The AI should provide the *full content* of the AIState.template.psd1 file, not just a PowerShell 'aiStateVariable = @{...}' block for a .psm1 file."
    fields_to_update_by_ai             = @(
      "ai_development_watch_list",
      "ai_bundler_update_instructions",
      "external_dependencies.executables",
      "external_dependencies.powershell_modules"
    )
    fields_to_be_updated_by_user       = @(
      "external_dependencies.executables (if new external tools are added - AI cannot auto-detect this reliably if path is not hardcoded/standard)"
    )
    example_of_ai_provided_block_end   = "}"
  }

  module_descriptions             = @{
    "__MODULE_DESCRIPTIONS_PLACEHOLDER__" = "This is a placeholder entry." # Dynamically populated
  }

  project_root_folder_name        = "__PROJECT_ROOT_NAME_PLACEHOLDER__"
  project_name                    = "PoSh Backup Solution"

  external_dependencies           = @{
    executables        = @(
      "7z.exe (7-Zip command-line tool - path configurable or auto-detected)",
      "powercfg.exe (Windows Power Configuration Utility - for Hibernate check)",
      "rundll32.exe (Windows utility - for Hibernate, Sleep, Lock actions)",
      "shutdown.exe (Windows utility - for Shutdown, Restart, LogOff actions)"
    )
    powershell_modules = @(
      "Posh-SSH (for SFTP target provider)"
    )
  }
}
